1)What is React?
    -> Open source JS library
    -> Used to create single page application
    -> Handles view layer of mobile apps

2) Main feature of react?
    -> uses virtualDOM instead of realDOM (realDOM manipultaion is expensive)
    -> supports server side rendering
    -> data flow is unidirectional
    -> use reusable UI components to create view

3) What is JSX?
    -> JSX is javascript XML - extension to the javascript language syntax
    -> JSX is not necessary to write react applications.
    -> syntactic sugar for the React.createElement() function
    -> JSX is transpiles (by babel) to pure JS which a browser can understand.

        React.createElement('div', null, 'Hi there!')
        <div>Hi there!</div>

4) React elements
    -> Elements are the smallest building blocks of React apps.
    -> An Element is a plain object describing what you want to appear on the screen
    -> The object representation of React Element would be as follows:

        const element = React.createElement(
          'div',
          {id: 'login-btn'},
          'Login'
        )

        The above React.createElement() function returns an object:

        {
          type: 'div',
          props: {
            children: 'Login',
            id: 'login-btn'
          }
        }

        And finally it renders to the DOM using ReactDOM.render():

        <div id='login-btn'>Login</div>

5) Updating the Rendered Element
    -> React elements are immutable. Once you create an element, you can’t change its 
       children or attributes.
    -> The only way to update the UI is to create a new element, and pass it to
       ReactDOM.render().
    -> React DOM compares the element and its children to the previous one, and only applies
       the DOM updates necessary to bring the DOM to the desired state.

6) What is component?
    -> Components let you split the UI into independent, reusable pieces, and think about
       each piece in isolation.
    -> It can be a class with a render() method. Alternatively, it can be defined as a
       function. In either case, it takes props as an input, and returns a JSX tree as 
       the output

=> A component either function or class, it must never modify its own props.

7) Pure component
    -> React.PureComponent is exactly the same as React.Component except that it handles
       the shouldComponentUpdate() method.
    -> When props or state changes, PureComponent will do a shallow comparison on both
       props and state.
    -> We can create a pure component by extending the PureComponent class.
    -> If there is no difference, the component is not re-rendered - performance boost.

8) What is state?
    ->  State of a component is an object that holds some information that may change over
        the lifetime of the component.
    ->  State is similar to props, but it is private and fully controlled by the component.
        i.e, It is not accessible to any component other than the one that owns and sets it.
    ->  Do Not Modify State Directly:
            // Wrong
            this.state.comment = 'Hello';

        Instead, use setState():
            // Correct
            this.setState({comment: 'Hello'});

    ->  State Updates May Be Asynchronous
    ->  React may batch multiple setState() calls into a single update for performance.
        // Wrong
        this.setState({
          counter: this.state.counter + this.props.increment,
        });

        // Correct
        this.setState((state, props) => ({
          counter: state.counter + props.increment
        }));

    -> Data Flows Down - “unidirectional” data flow
        -> Neither parent nor child components can know if a certain component is 
           stateful or stateless

9) What are props in React?
    ->  Props are inputs to components. They are single values or objects containing a
        set of values that are passed to components on creation using a naming 
        convention similar to HTML-tag attributes. 
    ->  They are data passed down from a parent component to a child component.

10) Why should we not update the state directly?
    ->  If you try to update state directly then it won't re-render the component.

            //Wrong
            this.state.message = 'Hello world'

    ->  Instead use setState() method. It schedules an update to a component's state
        object. When state changes, the component responds by re-rendering.

            //Correct
            this.setState({ message: 'Hello World' })

11) What is the difference between HTML and React event handling?
    ->  React events are named using camelCase, rather than lowercase.
    ->  With JSX we pass a function as the event handler, rather than a string.
        For example, the HTML:

            <button onclick="activateLasers()">
              Activate Lasers
            </button>
        is slightly different in React:

            <button onClick={activateLasers}>
              Activate Lasers
            </button>
    ->  Another difference is that you cannot return false to prevent default behavior
        in React. You must call preventDefault explicitly.

            <a href="#" onclick="console.log('The link was clicked.'); return false">
              Click me
            </a>
        In React, this could instead be:

            function ActionLink() {
              function handleClick(e) { // e is a synthetic event
                e.preventDefault();   =====================> this one
                console.log('The link was clicked.');
              }
              return (
                <a href="#" onClick={handleClick}>
                  Click me
                </a>
              );
            }
    ->  When using React, you generally don’t need to call addEventListener to add 
        listeners to a DOM element after it is created.

12) How to bind methods or event handlers in JSX callbacks?
    -> Binding in Constructor:
        class Component extends React.Component {
          constructor(props) {
            super(props)
            this.handleClick = this.handleClick.bind(this)
          }

          handleClick() {
            // ...
          }
        }

    -> Public class fields syntax:
        handleClick = () => {
          console.log('this is:', this)
        }

    ->  Arrow functions in callbacks:
        <button onClick={(event) => this.handleClick(event)}>
          {'Click me'}
        </button>

    Note: If the callback is passed as prop to child components, those components
          might do an extra re-rendering. In those cases, it is preferred to go with
          .bind() or public class fields syntax approach considering performance.

13) What is "key" prop and what is the benefit of using it in arrays of elements?
    ->  A key is a special string attribute you should include when creating arrays of
        elements. Key prop helps React identify which items have changed, are added,
        or are removed.
    ->  We don’t recommend using indexes for keys if the order of items may change.

14) What is the use of refs?
    ->  The ref is used to return a reference to the element. They should be avoided in
        most cases, however, they can be useful when you need a direct access to the
        DOM element or an instance of a component.

          class MyComponent extends React.Component {
            constructor(props) {
              super(props)
              this.myRef = React.createRef()
            }
            render() {
              return <div ref={this.myRef} />
            }
          }

15) What is Virtual DOM?
    -> The Virtual DOM (VDOM) is an in-memory representation of Real DOM. The representation
       of a UI is kept in memory and synced with the "real" DOM. It's a step that
       happens between the render function being called and the displaying of elements
       on the screen. This entire process is called reconciliation.

16) How Virtual DOM works?
    -> The Virtual DOM works in three simple steps:

        => Whenever any underlying data changes, the entire UI is re-rendered in
           Virtual DOM representation.
        => Then the difference between the previous DOM representation and the new one
           is calculated.
        => Once the calculations are done, the real DOM will be updated with only the
           things that have actually changed.

17) What is React Fiber?
    -> Fiber is the new reconciliation engine or reimplementation of core algorithm 
       in React v16. The goal of React Fiber is to increase its suitability for areas
       like animation, layout, gestures, ability to pause, abort, or reuse work and
       assign priority to different types of updates; and new concurrency primitives.
      
18) What are controlled components?
    -> A component that controls the input elements within the forms on subsequent user
       input is called Controlled Component, i.e, every state mutation will have an
       associated handler function.
    -> The UNCONTROLLED COMPONENTS are the ones that store their own state internally,
       and you query the DOM using a ref to find its current value when you need it.
       This is a bit more like traditional HTML.

19) What are the different phases of component lifecycle?
    -> The component lifecycle has three distinct lifecycle phases:
       => Mounting: The component is ready to mount in the browser DOM. This phase
                    covers initialization from constructor(), 
                    getDerivedStateFromProps(), render(), and componentDidMount() 
                    lifecycle methods.

       => Updating: In this phase, the component get updated in two ways, sending the
                    new props and updating the state either from setState() or 
                    forceUpdate(). This phase covers getDerivedStateFromProps(), 
                    shouldComponentUpdate(), render(), getSnapshotBeforeUpdate() and 
                    componentDidUpdate() lifecycle methods.

       => Unmounting: In this last phase, the component is not needed and get unmounted
                      from the browser DOM. This phase includes componentWillUnmount() 
                      lifecycle method.